{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOnVbkb5k+w3XAVS7i2oump"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":8,"metadata":{"id":"PQ5lsPm9Ba-N","executionInfo":{"status":"ok","timestamp":1731185014662,"user_tz":-330,"elapsed":444,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}}},"outputs":[],"source":[]},{"cell_type":"code","source":["# 1. Python | Sort Python Dictionaries by Key or Value\n","car={\"brand\": \"Ford\",\n","  \"model\": \"Mustang\",\n","  \"year\": 1964}\n","x = dict(sorted(car.items()))\n","x"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V7rz_7PVqMdr","executionInfo":{"status":"ok","timestamp":1730916762425,"user_tz":-330,"elapsed":8,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"0d519de2-c8b7-4e0b-dd79-1daf45772c77"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'brand': 'Ford', 'model': 'Mustang', 'year': 1964}"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# 2.  Handling missing keys in Python dictionaries\n","car={\"brand\": \"Ford\",\n","  \"model\": \"Mustang\",\n","  \"year\": 1964}\n","\n","x=car.get(\"color\",\"red\")\n","print(x)\n","value=car.setdefault(\"color\",\"red\")\n","print(car)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8X0Ddqqiqi-W","executionInfo":{"status":"ok","timestamp":1730919704516,"user_tz":-330,"elapsed":636,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"21f55463-d707-4b93-b94e-4f5f6d799106"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["red\n","{'brand': 'Ford', 'model': 'Mustang', 'year': 1964, 'color': 'red'}\n"]}]},{"cell_type":"code","source":["# 3. Python dictionary with keys having multiple inputs\n","dict1={\n","    'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')\n","}\n","dict1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C859nX-FsHK8","executionInfo":{"status":"ok","timestamp":1730917885748,"user_tz":-330,"elapsed":451,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"4403c8de-46e1-4523-abf0-d42f2ad49d3d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'name': ('Alice', 'Bob', 'Charlie'),\n"," 'age': (25, 30, 35),\n"," 'city': ('New York', 'San Francisco', 'Chicago')}"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# 4. Python program to find the sum of all items in a dictionary\n","dict1={\n","    'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')\n","}\n","print(sum(dict1['age']))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"stFVjgiZvoQV","executionInfo":{"status":"ok","timestamp":1730918031248,"user_tz":-330,"elapsed":613,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"505dfad8-ba70-44aa-d69a-043e0fa6fdaa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["90\n"]}]},{"cell_type":"code","source":["# 5. Python program to find the size of a Dictionary\n","dict1={\n","    'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')\n","}\n","print(len(dict1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1vNzl_AFwRn3","executionInfo":{"status":"ok","timestamp":1730918088687,"user_tz":-330,"elapsed":448,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"811d1bb3-6e98-432d-a1b7-685f2d511240"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n"]}]},{"cell_type":"code","source":["# 6. Ways to sort list of dictionaries by values in Python – Using itemg etter\n","from operator import itemgetter\n","dict1={\n","    'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')\n","}\n","print(sorted(dict1,key=itemgetter('age')))\n","print(dict(sorted(dict1.items())))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":193},"id":"GWa6pb5cxc4l","executionInfo":{"status":"error","timestamp":1730923120115,"user_tz":-330,"elapsed":431,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"dcc6bc3c-b149-44de-a188-d84c38a91185"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"string indices must be integers","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-e2adfb7c52cf>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;34m'name'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'Alice'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Bob'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Charlie'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'age'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m25\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m35\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'city'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'New York'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'San Francisco'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Chicago'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m }\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdict1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mitemgetter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'age'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdict1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: string indices must be integers"]}]},{"cell_type":"code","source":["# 7. Ways to sort list of dictionaries by values in Python – Using lambda function\n","dict1={\n","    'name': ('Alice', 'Bob', 'Charlie'),  'city': ('New York', 'San Francisco', 'Chicago')\n","}\n","print(sorted(dict1.items(),key=lambda x:x[1]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cAOJhwguyG3J","executionInfo":{"status":"ok","timestamp":1731233513117,"user_tz":-330,"elapsed":455,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"18571885-f49e-42d2-af1c-e879dcab22bc"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["[('name', ('Alice', 'Bob', 'Charlie')), ('city', ('New York', 'San Francisco', 'Chicago'))]\n"]}]},{"cell_type":"code","source":["# 8. Python | Merging two Dictionaries\n","dict1={\n","    'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')\n","}\n","dict2={\"brand\": \"Ford\",\n","  \"model\": \"Mustang\",\n","  \"year\": 1964}\n","dict3=dict1.copy()\n","dict3.update(dict2)\n","dict3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FYXVOS3VzUCB","executionInfo":{"status":"ok","timestamp":1730921036096,"user_tz":-330,"elapsed":426,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"95565a6c-c204-42bc-e1d8-b9bd1426835c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'name': ('Alice', 'Bob', 'Charlie'),\n"," 'age': (25, 30, 35),\n"," 'city': ('New York', 'San Francisco', 'Chicago'),\n"," 'brand': 'Ford',\n"," 'model': 'Mustang',\n"," 'year': 1964}"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["# 9. Program to create grade calculator in Python\n","def calculate_grade(score):\n","   if score >=90 :\n","    return \"A\"\n","   elif score >=80:\n","       return \"B\"\n","   elif score >=70:\n","          return \"C\"\n","   elif score >=60:\n","    return \"D\"\n","   else:\n","    return \"F\"\n","   score =int(input(\"enter your score\"))\n","   grade = calculate_grade(score)\n","   print(f\"your grade is {grade}\")\n"],"metadata":{"id":"f_wG1GWm7qBj","executionInfo":{"status":"ok","timestamp":1731242456197,"user_tz":-330,"elapsed":466,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["# 10. Python – Insertion at the beginning in OrderedDict\n","from collections import OrderedDict\n","dict1={\n","    'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')\n","}\n","dict1.update({'color':('red','blue','green')})\n","dict2 = orderedDict(dict1)\n","dict2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"L9VIV09F9sla","executionInfo":{"status":"error","timestamp":1731238162358,"user_tz":-330,"elapsed":719,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"02bbe2b0-d94f-44b3-dd5b-fccefa5b7936"},"execution_count":22,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'orderedDict' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-96ca68c48bb7>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m }\n\u001b[1;32m      6\u001b[0m \u001b[0mdict1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'color'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'red'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'blue'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'green'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mdict2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0morderedDict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdict1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mdict2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'orderedDict' is not defined"]}]},{"cell_type":"code","source":[],"metadata":{"id":"agbMatef1nQi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ORlHGxcR1nFm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 11. Python | Check order of character in string using OrderedDict( )\n","from collections import OrderedDict\n","def checkOrder(input, pattern):\n","    dict = OrderedDict.fromkeys(input)\n",""],"metadata":{"id":"5a0-a2_oDPLi","executionInfo":{"status":"ok","timestamp":1731242552162,"user_tz":-330,"elapsed":3,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["#12. Python | Find common elements in three sorted arrays by dictionary intersection\n","array1 = [1,2,3,4]\n","array2 = [2,3,4,5]\n","array3 = [3,4,5,6]\n","array5 = {x for x in array1 if x in array2 and x in array3}\n","array5"],"metadata":{"id":"BiKU-NWSEEmL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731076670707,"user_tz":-330,"elapsed":6,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"97630c6c-d067-4243-b98a-be8fad93cd8e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{3, 4}"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["#13. Dictionary and counter in Python to find winner of election\n","votes = [\"Marie\",\"Bob\",\"julie\",\"john\",\"john\",\"jack\",\"jack\",\"Marie\",\"john\",\"john\",\"julie\",\"jack\",\"Bob\"]\n","from collections import Counter\n","vote_count = Counter(votes)\n","vote_count"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kE4ocKVTNYcs","executionInfo":{"status":"ok","timestamp":1731077189474,"user_tz":-330,"elapsed":588,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"12c10bbc-9088-489e-e30b-23f67d986997"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Counter({'Marie': 2, 'Bob': 2, 'julie': 2, 'john': 4, 'jack': 3})"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["#14.Python – Key with maximum unique values\n","dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}\n","max_unique_values = max(dict1.items(), key=lambda x: len(set(x[1])))\n","max_unique_values"],"metadata":{"id":"IR-vUFlWPam5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731183272055,"user_tz":-330,"elapsed":449,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"e64c793d-92b3-413c-e4c7-12b659b49869"},"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('name', ('Alice', 'Bob', 'Charlie'))"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":["#15. Find all duplicate characters in string\n","string = \"hello world\"\n","duplicates = {}\n","for char in string:\n","    if char in duplicates:\n","        duplicates[char] += 1\n","    else:\n","        duplicates[char] = 1\n","print(duplicates)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E_BW6gDlkDSp","executionInfo":{"status":"ok","timestamp":1731184117186,"user_tz":-330,"elapsed":442,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"07a6b3f1-d687-4955-efc0-90ac38d99700"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["{'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n"]}]},{"cell_type":"code","source":["#16. Python – Group Similar items to Dictionary Values List\n","dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}\n","dict2 = {}\n","for key,value in dict1.items():\n","    dict2.setdefault(tuple(value),[]).append(key)\n","dict2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QFPgKYmUkXLl","executionInfo":{"status":"ok","timestamp":1731184244803,"user_tz":-330,"elapsed":437,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"e9c85ed3-f958-44da-a7d8-659685d05eb8"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{('Alice', 'Bob', 'Charlie'): ['name'],\n"," (25, 30, 35): ['age'],\n"," ('New York', 'San Francisco', 'Chicago'): ['city']}"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["#17. K’th Non-repeating Character in Python using List Comprehension and OrderedDict\n","dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}\n","dict2 = {}\n"],"metadata":{"id":"FVIwnXklkd2M","executionInfo":{"status":"ok","timestamp":1731183414061,"user_tz":-330,"elapsed":683,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["#18. Python – Replace String by Kth Dictionary value\n","dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}\n","dict2 = {}\n"],"metadata":{"id":"AAxaJX4SkoWm","executionInfo":{"status":"ok","timestamp":1731183419605,"user_tz":-330,"elapsed":730,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["#19. Python | Ways to remove a key from dictionary\n","dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}\n","del dict1['name']\n","dict1\n","#way 2\n","dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}\n","dict1.pop('name')\n","dict1\n","# way 3\n","dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}\n","dict1 = {key: value for key, value in dict1.items() if key != 'name'}\n","dict1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CLlTPDLQkqj4","executionInfo":{"status":"ok","timestamp":1731235406006,"user_tz":-330,"elapsed":452,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"ecd7ea20-eca8-4e45-f47f-79e1591d2b64"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["#20. Python – Replace words from Dictionary\n","dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}\n","replace_dict = {'name': 'John', 'city': 'Paris'}\n","for key, value in replace_dict.items():\n","  dict1[key] = value\n","dict1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A1lj3F_hkqmk","executionInfo":{"status":"ok","timestamp":1731235625497,"user_tz":-330,"elapsed":471,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"b54e4ac1-c996-405f-f439-5873bdb3fba2"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'name': 'John', 'age': (25, 30, 35), 'city': 'Paris'}"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["#21. Python – Remove Dictionary Key Words\n","dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'age': (25, 30, 35), 'city': ('New York', 'San Francisco', 'Chicago')}\n","remove_keys = ['name', 'age']\n","for key in remove_keys:\n","  dict1.pop(key)\n","dict1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HPZJAFLqkqpI","executionInfo":{"status":"ok","timestamp":1731235754502,"user_tz":-330,"elapsed":460,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"081e7bdf-b00e-4ad2-d8e4-069c195d5b78"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'city': ('New York', 'San Francisco', 'Chicago')}"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["#22. Python | Remove all duplicates words from a given sentence\n","sentence = \"hello world hello world\"\n","words = sentence.split()\n","unique_words = set(words)\n","unique_sentence = \" \".join(unique_words)\n","unique_sentence\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"p5F3kcmFkqsh","executionInfo":{"status":"ok","timestamp":1731235899720,"user_tz":-330,"elapsed":427,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"bd77a6f4-55a2-4bfd-bd94-e913e9900606"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'hello world'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["#23. Python – Remove duplicate values across Dictionary Values\n","D1 = {\"a\": [1, 2, 3], \"b\": [2, 3, 4], \"c\": [23, 4, 5]}\n","duplicate_values = set()\n","D2 = {}\n","for key, value in D1.items():\n","  unique_values = [x for x in value if x not in duplicate_values]\n","  duplicate_values.update(value)\n","  D2[key] = unique_values\n","D2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t2OoJ0zpkqvK","executionInfo":{"status":"ok","timestamp":1731236032214,"user_tz":-330,"elapsed":437,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"1c612597-b675-4051-f8bc-82f4c3f3fa08"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'a': [1, 2, 3], 'b': [4], 'c': [23, 5]}"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["#24. Python Dictionary to find mirror characters in a string\n","dict1 = {'a': 'z', 'b': 'y', 'c': 'x','y':'b','z':'a'}\n","str1=\"abc\"\n","mirror_str = \"\"\n","for char in str1:\n","  mirror_str += dict1[char]\n","mirror_str\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"rvIHElOokqxy","executionInfo":{"status":"ok","timestamp":1731236256614,"user_tz":-330,"elapsed":475,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"d82392e2-75a3-4ec0-bb2e-e045cba8d17d"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'zyx'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["#25. Counting the frequencies in a list using dictionary in Python\n","l1 = [1, 2, 3, 4, 2, 3, 1, 4, 5, 6, 2, 3]\n","dict1 = {}\n","for item in l1:\n","  if item in dict1:\n","    dict1[item] += 1\n","  else:\n","    dict1[item] = 1\n","dict1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ExSltUb1kq0f","executionInfo":{"status":"ok","timestamp":1731236517270,"user_tz":-330,"elapsed":6,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"25c3f5fa-000f-4759-ba20-21ff84790c93"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{1: 2, 2: 3, 3: 3, 4: 2, 5: 1, 6: 1}"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["#26. Python – Dictionary Values Mean\n","dict1 = {\"a\": [1, 2, 3], \"b\": [2, 3, 4], \"c\": [3, 4, 5]}\n","dict2 = {}\n","for key, value in dict1.items():\n","  dict2[key] = sum(value) / len(value)\n","print(dict2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SFNbgR7-kq3J","executionInfo":{"status":"ok","timestamp":1731188935788,"user_tz":-330,"elapsed":444,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"e3e2f88c-23d9-4b27-a791-763d3301d6dd"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["{'a': 2.0, 'b': 3.0, 'c': 4.0}\n"]}]},{"cell_type":"code","source":["#27. Python counter and dictionary intersection example (Make a string using deletion and rearrangement)\n","from collections import Counter\n","\n"],"metadata":{"id":"hrwXSzgYkq5_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#28. Python dictionary, set and counter to check if frequencies can become same\n","from collections import Counter\n","dict1 = {'a': 1, 'b': 2, 'c': 2, 'd': 1, 'e': 3}\n","counter = Counter(dict1.values())\n","if len(counter) <= 2 and (counter.most_common()[0][1] == 1 or (len(counter) == 2 and abs(counter.most_common()[0][1] - counter.most_common()[1][1]) == 1)):\n","  print(\"yes\")\n","counter"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ABDfn9nckq9a","executionInfo":{"status":"ok","timestamp":1731236933868,"user_tz":-330,"elapsed":1148,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"92622951-20e7-43ba-f34e-3815e621be27"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Counter({1: 2, 2: 2, 3: 1})"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["#29. Scraping And Finding Ordered Words In A Dictionary using Python\n","dict1 = {'name': ('Alice', 'Bob', 'Charlie'), 'car':('mustang','camaro','subaru'), 'city': ('New York', 'San Francisco', 'Chicago')}\n","l1=list(dict1.values())\n","ordered_words = []\n","for word in l1:\n","  is_ordered = True\n","  for i in range(len(word) - 1):\n","    if word[i] > word[i + 1]:\n","      is_ordered = False\n","      break\n","  if is_ordered:\n","    ordered_words.append(word)\n","ordered_words"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LS7OY8Ijl2I5","executionInfo":{"status":"ok","timestamp":1731243406392,"user_tz":-330,"elapsed":715,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"41b26ea0-f49a-4ca0-d0c5-4c7ae7ee729f"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["[('Alice', 'Bob', 'Charlie'), ('mustang', 'camaro', 'subaru'), ('New York', 'San Francisco', 'Chicago')]\n"]}]},{"cell_type":"code","source":["#30. Possible Words using given characters in Python\n"],"metadata":{"id":"5sSlUq5Ul2Ll"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#31. Python – Maximum record value key in dictionary\n","#D1 = {\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}, \"e\": 4}\n","#max_value = max(D1.values())\n","#max_value\n","H1 = {\"a\": [1, 2, 3], \"b\": [2, 3, 4], \"c\": [3, 4, 5]}\n","H2 = {}\n","for key, value in H1.items():\n","  H2[key] = max(value)\n","  H3 = max(H2, key=H2.get)\n","print(H2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_4HfVg51l2PN","executionInfo":{"status":"ok","timestamp":1731243619270,"user_tz":-330,"elapsed":443,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"e636191a-20d8-491c-d409-c3bd34f57fe1"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["{'a': 3, 'b': 4, 'c': 5}\n"]}]},{"cell_type":"code","source":["#32. Python – Extract values of Particular Key in Nested Values\n","D1 = {\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}, \"e\": 4}\n","D2 = D1[\"b\"]\n","D3 = list(D2.values())\n","print(D3)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fTkRVNb2l2Sj","executionInfo":{"status":"ok","timestamp":1731187741667,"user_tz":-330,"elapsed":455,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"be3ef597-b64f-412a-c01c-de944dc6c235"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 3]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"JiicKKit1I9y"},"execution_count":null,"outputs":[]}]}
