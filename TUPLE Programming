{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPXVipXQ5R8ezV8ypeIDJkc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":47,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u19qI_9SVwBU","executionInfo":{"status":"ok","timestamp":1731157762604,"user_tz":-330,"elapsed":435,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"659343bf-c2b9-426b-f4d2-2b5f00fd56dd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Size of Tuple1: 64bytes\n"]}],"source":["# 1. Python program to Find the size of a Tuple\n","\n","t1=(1,2,3,4,5)\n","print(\"Size of Tuple1: \" + str(t1.__sizeof__()) + \"bytes\")"]},{"cell_type":"code","source":["# 2.Python – Maximum and Minimum K elements in Tuple\n","\n","t1=(1,2,3,4,5,6,7,8)\n","K = 2\n","l1=list(t1)\n","l1.sort()\n","my_result=tuple(l1[:K]+l1[-K:])\n","my_result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BtEOoDROWmws","executionInfo":{"status":"ok","timestamp":1731155432622,"user_tz":-330,"elapsed":440,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"0290e707-fb82-461d-b37e-e3466ea3383b"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 2, 7, 8)"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["# 3.Create a list of tuples from given list having number and its cube in each tuple\n","l1=[1,2,3,4,5]\n","l2=[(i,i**3) for i in l1]\n","print(l2)\n","# way 2\n","l1=[1,2,3,4,5]\n","l2=[]\n","for i in l1:\n","    l2.append((i,i**3))\n","print(l2)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M-_7PeqEW1dc","executionInfo":{"status":"ok","timestamp":1730626284365,"user_tz":-330,"elapsed":443,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"780ed0ce-407f-4dea-e0ba-b55f4a867efe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 1), (2, 8), (3, 27), (4, 64), (5, 125)]\n"]}]},{"cell_type":"code","source":["# 4. Python – Adding Tuple to List and vice – versa\n","l1=[1,2,3,4,5]\n","t1=(1,2,3,4,5)\n","l1.append(t1)\n","print(l1)\n","t2=list(t1)\n","t2.append(l1)\n","print(t2)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B5zFsEPNXWat","executionInfo":{"status":"ok","timestamp":1730626649034,"user_tz":-330,"elapsed":437,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"7ec54f78-67b6-4a1a-bab6-72ac04c0b5bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5, (1, 2, 3, 4, 5)]\n","[1, 2, 3, 4, 5, [1, 2, 3, 4, 5, (1, 2, 3, 4, 5)]]\n"]}]},{"cell_type":"code","source":["# 5. Python – Sum of tuple elements\n","t1=(1,2,3,4,5)\n","print(sum(t1))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tLCwU1gnX4IZ","executionInfo":{"status":"ok","timestamp":1730626724346,"user_tz":-330,"elapsed":11,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"a418c0bf-7509-47b6-c987-555fe65842e1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["15\n"]}]},{"cell_type":"code","source":["# 6. Python – Modulo of tuple elements\n","t1=(1,2,3,4,5)\n","mod_value = 2\n","mod_results = [i % mod_value for i in t1]\n","print(mod_results)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KU4w6AgcX6OH","executionInfo":{"status":"ok","timestamp":1730626845677,"user_tz":-330,"elapsed":408,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"a7bd74ad-1d73-421a-cdb5-4779ae812521"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","0\n","1\n","0\n","1\n"]}]},{"cell_type":"code","source":["# 7. Python – Row-wise element Addition in Tuple Matrix\n","t1 =((1,2),(3,4),(5,6,7),(8,9,10,11))\n","l1=[]\n","for i in t1:\n","  l1.append(sum(i))\n","print(l1)\n"],"metadata":{"id":"9YzQI-qHZIvR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731000344869,"user_tz":-330,"elapsed":423,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"8ab8745f-8ff8-40a6-a8ff-0aedbf8b898b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[3, 7, 18, 38]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"QCsoqLbdZI-v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 8. Python – Update each element in tuple list\n","t1 =((1,2),(3,4),(5,6,7),(8,9,10,11))\n","l1=list(t1)\n","for i in l1:\n","  for j in i:\n","    print(j+1,end=\" \")\n","t1=tuple(l1)\n","print(t1)\n"],"metadata":{"id":"BFpJUym1ZJOP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731000737097,"user_tz":-330,"elapsed":5,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"0212ca7e-5c77-403b-b31c-d2e454b3a351"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2 3 4 5 6 7 8 9 10 11 12 ((1, 2), (3, 4), (5, 6, 7), (8, 9, 10, 11))\n"]}]},{"cell_type":"code","source":["# 9. Python – Multiply Adjacent elements\n","t1 =((1,2),(3,4),(5,6,7),(8,9,10,11))\n","l1=list(t1)\n","for i in l1:\n","  for j in i:\n","    print(j*(j+1),end=\" \")\n"],"metadata":{"id":"EptSOlc2ZFDF","executionInfo":{"status":"ok","timestamp":1731000801853,"user_tz":-330,"elapsed":413,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1fef82d7-a262-4743-e9b4-2c25471167d4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2 6 12 20 30 42 56 72 90 110 132 "]}]},{"cell_type":"code","source":["# 10. Python – Join Tuples if similar initial element\n","t1 =((1,2),(3,4),(5,6,7),(8,9,10,11))\n","l1=list(t1)\n","l2=[]\n","for i in l1:\n","  if l2 and l2[-1][0]==i[0]:\n","    l2[-1].extend(i[1:])\n","  else:\n","    l2.append(list(i))\n","    t1=tuple(l2)\n","print(t1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wnopQyjgem2J","executionInfo":{"status":"ok","timestamp":1731000962907,"user_tz":-330,"elapsed":432,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"ac7da5a5-f2f7-4751-b84a-332e8446d0d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["([1, 2], [3, 4], [5, 6, 7], [8, 9, 10, 11])\n"]}]},{"cell_type":"code","source":["# 11. Python – All pair combinations of 2 tuples\n","t1 =((1,2),(3,4),(5,6,7),(8,9,10,11))\n","t2 = ((9,8),(7,6),(5,4),(3,2))\n","l1=list(t1)\n","l2=list(t2)\n","l3=[]\n","for i in l1:\n","  for j in l2:\n","    l3.append((i,j))\n","t3 = tuple(l3)\n","print(t3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mUBqqE75enEj","executionInfo":{"status":"ok","timestamp":1731001635916,"user_tz":-330,"elapsed":13,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"8118a143-844e-4251-aa8f-c02d5e41106a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(((1, 2), (9, 8)), ((1, 2), (7, 6)), ((1, 2), (5, 4)), ((1, 2), (3, 2)), ((3, 4), (9, 8)), ((3, 4), (7, 6)), ((3, 4), (5, 4)), ((3, 4), (3, 2)), ((5, 6, 7), (9, 8)), ((5, 6, 7), (7, 6)), ((5, 6, 7), (5, 4)), ((5, 6, 7), (3, 2)), ((8, 9, 10, 11), (9, 8)), ((8, 9, 10, 11), (7, 6)), ((8, 9, 10, 11), (5, 4)), ((8, 9, 10, 11), (3, 2)))\n"]}]},{"cell_type":"code","source":["# 12. Python – Remove Tuples of Length K\n","t1 =((1,2),(3,4),(5,6,7),(8,9,10,11))\n","k=2\n","l1=list(t1)\n","for i in l1:\n","  if len(i)==k:\n","    l1.remove(i)\n","    t1=tuple(l1)\n","print(t1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kHB5qY4RenGv","executionInfo":{"status":"ok","timestamp":1731001814999,"user_tz":-330,"elapsed":427,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"0f72338c-ce2b-4c6b-c2fb-7f429bbc0e89"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["((3, 4), (5, 6, 7), (8, 9, 10, 11))\n"]}]},{"cell_type":"code","source":["# 13. Python – Remove Tuples from the List having every element as none\n","t1 =((1,2),(3,4),(5,6,7),(8,9,10,11))\n","l1=list(t1)\n","for i in l1:\n","  if all(j is None for j in i):\n","    l1.remove(i)\n","    t1=tuple(l1)\n","print(t1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z3V5BOkoenJZ","executionInfo":{"status":"ok","timestamp":1731001928978,"user_tz":-330,"elapsed":450,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"df8b89ae-f65b-4a5f-9f40-e3dc484e3abd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["((1, 2), (3, 4), (5, 6, 7), (8, 9, 10, 11))\n"]}]},{"cell_type":"code","source":["# 14. Sort a list of tuples by second Item\n","t1 =((3,4),(1,2),(5,6,7),(8,9,10,11))\n","sorted_t1=sorted(t1, key=lambda x:x[1])\n","print(sorted_t1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xeBVdRQ2enMv","executionInfo":{"status":"ok","timestamp":1731149670921,"user_tz":-330,"elapsed":445,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"8ba13cdd-e289-4666-b9b9-d8d730ff4e98"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 2), (3, 4), (5, 6, 7), (8, 9, 10, 11)]\n"]}]},{"cell_type":"code","source":["# 15. Python – Sort Tuples by Total digits\n","t1=(3,6,5,6,7,432,6)\n","l1=list(t1)\n","l1.sort()\n","t1=tuple(l1)\n","print(t1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I9oPzFWxenPq","executionInfo":{"status":"ok","timestamp":1731005233992,"user_tz":-330,"elapsed":7,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"14c6024c-3bd2-43de-c0a7-ff60468bc216"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(3, 5, 6, 6, 6, 7, 432)\n"]}]},{"cell_type":"code","source":["# 16. Python – Elements frequency in Tuple\n","t1=(3,6,5,6,7,432,6)\n","frequency={i:t1.count(i)for i in t1}\n","print(frequency)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gv4qX8eCenSh","executionInfo":{"status":"ok","timestamp":1731005901723,"user_tz":-330,"elapsed":404,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"abacb4fa-cd58-49ff-df75-f69e1c5ef5bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{3: 1, 6: 3, 5: 1, 7: 1, 432: 1}\n"]}]},{"cell_type":"code","source":["# 17. Python – Filter Range Length Tuples\n","t1=(3,6,5,6,7,432,6)\n","l1=list(t1)\n","\n"],"metadata":{"id":"HXLOIOaaenVV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 18. Python – Assign Frequency to Tuples\n","t1=(3,6,5,6,7,432,6)\n","l1=list(t1)\n","frequency={i:t1.count(i)for i in t1}\n","l2=[]\n","for i in l1:\n","  l2.append(frequency[i])\n","t2=tuple(l2)\n","print(t2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yy7wfd31enYk","executionInfo":{"status":"ok","timestamp":1731047842204,"user_tz":-330,"elapsed":645,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"e076bfee-c825-47a3-e10f-77c66a2f4cd3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 3, 1, 3, 1, 1, 3)\n"]}]},{"cell_type":"code","source":["# 19. Python – Records with Value at K index\n","t1=((12,34,42),(34,567,867),(5,7),(8,9,10,11))\n","k=1\n","l1=list(t1)\n","l2=[]\n","for i in l1:\n","  if i[k] is not None:\n","    l2.append(i)\n","l2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-PpcxkhsenbP","executionInfo":{"status":"ok","timestamp":1731156176356,"user_tz":-330,"elapsed":457,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"b3b16456-f0f6-4a36-d760-54a5410add2c"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(12, 34, 42), (34, 567, 867), (5, 7), (8, 9, 10, 11)]"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["# 20. Python – Test if tuple is distinct\n","t1=(1,2,3,4,5,4,3,2,1)\n","if len(t1)==len(set(t1)):\n","  print(\"distinct\")\n","else:\n","  print(\"not distinct\")"],"metadata":{"id":"WglpQdVuend9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731150763767,"user_tz":-330,"elapsed":458,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"a0f0a676-2f2f-4bd1-9fd3-85f3a48ac387"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["not distinct\n"]}]},{"cell_type":"code","source":["# 21. Python program to find tuples which have all elements divisible by K from a list of tuples\n","t1=((1,2),(6,4),(5,6,7),(8,9,10,11))\n","k=2\n","l1=list(t1)\n","l2=[]\n","for i in l1:\n","  if all(j%k==0 for j in i):\n","    l2.append(i)\n","t2=tuple(l2)\n","t2"],"metadata":{"id":"RNPt2upAenhV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731151644997,"user_tz":-330,"elapsed":452,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"5120198b-c8b6-4172-c39d-190eb9465f97"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((6, 4),)"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# 22. Python program to find Tuples with positive elements in List of tuples\n","t1=((1,2),(3,4),(5,6,7),(8,9,10,11))\n","l1=list(t1)\n","l2=[]\n","for i in l1:\n","  if all(j>0 for j in i):\n","    l2.append(i)\n","t2=tuple(l2)\n","t2\n"],"metadata":{"id":"BCp1F9k8enkE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731151762080,"user_tz":-330,"elapsed":1067,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"bb583720-656d-428b-bc21-517a465cd966"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((1, 2), (3, 4), (5, 6, 7), (8, 9, 10, 11))"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# 23. Python – Count tuples occurrence in list of tuples\n","t1=((1,2),(3,4),(5,6,7),(8,9,10,11))\n","l1=list(t1)\n","l2=[]\n","for i in l1:\n","  l2.append(l1.count(i))\n","t2=tuple(l2)\n","t2"],"metadata":{"id":"RFdz1sXpennD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731151852391,"user_tz":-330,"elapsed":11,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"e2205d9b-a0fe-491a-beca-7c8243a70a37"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 1, 1, 1)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# 24. Python – Removing duplicates from tuple\n","t1=(1,2,3,4,5,4,3,2,1)\n","t2=tuple(set(t1))\n","t2"],"metadata":{"id":"A4l_wv7qenpu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731151926738,"user_tz":-330,"elapsed":443,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"f93ebb01-c483-4f65-9606-33a82ba67966"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 2, 3, 4, 5)"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# 25. Python – Remove duplicate lists in tuples (Preserving Order)\n","t1=((1,2),(3,4),(5,6,7),(8,9,10,11),(3,4),(2,1))\n","l1=list(t1)\n","l2=[]\n","for i in l1:\n","  if i not in l2:\n","    l2.append(i)\n","t2=tuple(l2)\n","t2"],"metadata":{"id":"p2AvSrzfensa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731152050803,"user_tz":-330,"elapsed":461,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"ef57953a-e5a5-469d-e54d-90bacdce77e2"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((1, 2), (3, 4), (5, 6, 7), (8, 9, 10, 11), (2, 1))"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# 26. Python – Extract digits from Tuple list\n","t1=((1,2),(3,4),(5,6,7),(8,9,10,11))\n","l1=list(t1)\n","l2=[]\n","for i in l1:\n","  for j in i:\n","    if str(j).isdigit():\n","      l2.append(int(j))\n","t2=tuple(l2)\n","t2"],"metadata":{"id":"-UACk1ZsenvT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731152112083,"user_tz":-330,"elapsed":430,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"f58fc4b7-dd6c-4c02-ace0-a102ac8017d9"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["# 27. Python – Cross Pairing in Tuple List\n","t1=((1,2),(3,4),(5,6,7),(8,9,10,11))\n","t2=((1,2),(3,4),(5,6,7),(8,9,10,11))\n","l1=list(t1)\n","l2=list(t2)\n","l3=[]\n","for i in range(len(l1)):\n","  l3.append((l1[i],l2[i]))\n","l3"],"metadata":{"id":"bmhcMUttenys","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731152186374,"user_tz":-330,"elapsed":461,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"69190721-3c18-4d62-de58-63cb0d769847"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[((1, 2), (1, 2)),\n"," ((3, 4), (3, 4)),\n"," ((5, 6, 7), (5, 6, 7)),\n"," ((8, 9, 10, 11), (8, 9, 10, 11))]"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# 28. Python – Consecutive Kth column Difference in Tuple List\n","t1=((1,2),(3,4),(5,6,7),(8,9,10,11))\n","k=1\n","diffrence=[]\n","for i in range(1,len(t1)):\n","  diff=t1[i][k]-t1[i-1][k]\n","  diffrence.append(diff)\n","diffrence\n",""],"metadata":{"id":"8vVz4ffken1Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731153023226,"user_tz":-330,"elapsed":469,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"5e04e4dd-7a97-49e9-9227-a4ade4af45b4"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2, 2, 3]"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["# 29.Python – Kth Column Product in Tuple List\n","t1=((1,2),(3,4),(5,6,7),(8,9,10,11))\n","k=1\n","product=1\n","for i in t1:\n","  product *= i[k]\n","product"],"metadata":{"id":"P5k9_mwyen4p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731153089193,"user_tz":-330,"elapsed":440,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"53bc7551-11ed-4978-f96a-eed0b8cc63e1"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["432"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# 30. Python – Flatten tuple of List to tuple\n","t1=((1,2),(3,4),(5,6,7),(8,9,10,11))\n","l1=list(t1)\n","l2=[]\n","for i in l1:\n","  for j in i:\n","    l2.append(j)\n","t2=tuple(l2)\n","t2"],"metadata":{"id":"5PrHR9iQen7X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731153245338,"user_tz":-330,"elapsed":456,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"3f9794a6-7757-413e-ec50-2ca9b55f9f2a"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["# 31. Python – Flatten Tuples List to String\n","t1=((1,2),(3,4),(5,6,7),(8,9,10,11))\n","l1=list(t1)\n","l2=[]\n","for i in l1:\n","  for j in i:\n","    l2.append(str(j))\n","t2=''.join(l2)\n","t2\n"],"metadata":{"id":"jROsP47Oen99","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1731153465812,"user_tz":-330,"elapsed":478,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"24d2b2f1-4383-49cc-b2da-9b70fe966f6f"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'1234567891011'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["\n","# 32. Python program to sort a list of tuples alphabetically\n","t1=((\"bob\",12),(\"justin\",3),(\"abraham\",1),(\"matt\",13),(\"david\",14),(\"miley\",15))\n","l1=list(t1)\n","l1.sort()\n","l1\n"],"metadata":{"id":"GsKQNMWleoA1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731156962702,"user_tz":-330,"elapsed":443,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"2a03dd4f-cd58-467b-8a75-5324affefa7b"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('abraham', 1),\n"," ('bob', 12),\n"," ('david', 14),\n"," ('justin', 3),\n"," ('matt', 13),\n"," ('miley', 15)]"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["# 33. Python – Combinations of sum with tuples in tuple\n","t1 =((1,2),(3,4),(5,6),(0,7),(8,9),(10,11))\n","result = []\n","for i in range(len(t1)):\n","    for j in range(i+1, len(t1)):\n","        result.append((t1[i][0]+t1[j][0],\n","                    t1[i][1]+t1[j][1]))\n","print(t1)\n","print(result)\n"],"metadata":{"id":"Eig0qeaqeoEZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731157566967,"user_tz":-330,"elapsed":434,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"ebcdbf10-5749-450e-9cc4-3e166c361505"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["((1, 2), (3, 4), (5, 6), (0, 7), (8, 9), (10, 11))\n","[(4, 6), (6, 8), (1, 9), (9, 11), (11, 13), (8, 10), (3, 11), (11, 13), (13, 15), (5, 13), (13, 15), (15, 17), (8, 16), (10, 18), (18, 20)]\n"]}]},{"cell_type":"code","source":["# 34. Python – Custom sorting in list of tuples\n","'''t1=((12,85),(11,9),(11,6),(57,67),(89,111))\n","l1=list(t1)\n","l1.sort(key=lambda x:x[1])\n","t2=tuple(l1)\n","t2'''\n","\n","\n","\n","t1 = ((12,85),(11,9),(11,6),(57,67),(89,111))\n","l1=list (t1)\n","n = len(l1)\n","for i in range(n):\n","    for j in range(n-i-1):\n","        if l1[j][0] < l1[j+1][0] or (l1[j][0] == l1[j+1][0] and l1[j][1] > l1[j+1][1]):\n","            l1[j], l1[j+1] = l1[j+1], l1[j]\n","print(tuple(l1))"],"metadata":{"id":"rPTuBhfdhDkN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1731158378346,"user_tz":-330,"elapsed":451,"user":{"displayName":"Suman Sharan","userId":"07916439123781403766"}},"outputId":"b3b1e937-700d-45c5-b479-3f6283b61a7f"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["((89, 111), (57, 67), (12, 85), (11, 6), (11, 9))\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"TCO1geyd23YB"},"execution_count":null,"outputs":[]}]}
